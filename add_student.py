#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Aug 09, 2020 07:12:54 PM IST  platform: Windows NT

import sys
import cv2
import os
from tkinter import messagebox
import model
from tkinter.filedialog import askopenfilename
from tkinter.messagebox import showerror

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import add_student_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    add_student_support.set_Tk_var()
    top = Toplevel1 (root)
    add_student_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    add_student_support.set_Tk_var()
    top = Toplevel1 (w)
    add_student_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def addStudent(self):
        name = self.txtName.get()
        cls = self.comboClass.get()
        p = self.lblPicPath.cget("text")

        try:
            roll = int(self.txtRoll.get())
            if name != "" and cls != "Select Class" and roll != "" and self.pic != "" or p != "":
                istud = model.insertStudent(roll, name, self.pic, cls)
                if istud:
                    messagebox.showinfo("Attendance - Add Student", "Student added succesfully!", master=root)
                    self.lblPicPath.configure(text="")
                    self.txtName.delete(0, "end")
                    self.txtRoll.delete(0, "end")
                    self.comboClass.current(0)
                else:
                    messagebox.showwarning("Attendance - Add Student", "Failed to Student or roll no already exists!", master=root)
            else:
                messagebox.showwarning("Attendance - Add Student", "Student Name, class, roll no and pic field is required!", master=root)
        except ValueError:
            messagebox.showwarning("Attendance - Add Student",
                                   "Only Numbers are allowed in the roll no field and the Picture should be clear!", master=root)

    def load_file(self):
        fname = askopenfilename(filetypes=(("Image Files", "*.jpg;*.jpeg;*.png;"), ("Template files", "*.tplate")),master=root)
        f = os.path.basename(fname)
        name = f.split(".")[0]
        if fname:
            try:
                # print("""here it comes: self.settings["template"].set(fname)""",fname)
                if self.txtName.get() == "":
                    self.txtName.delete(0, "end")
                    self.txtName.insert(0, name.upper())

                self.lblPicPath.configure(text=f)
            except:  # <- naked except is a bad idea
                showerror("Open Source File", "Failed to read file\n'%s'" % fname)
            self.pic = model.convertToBinaryData(fname)

    def takePic(self):
        cls = self.comboClass.get()
        name = str(self.txtRoll.get())
        if name != "" and cls != "Select Class":
            cam = cv2.VideoCapture(0)

            while True:
                ret, img = cam.read()

                cv2.imshow("Attendance", img)

                if not ret:
                    break

                k = cv2.waitKey(1)

                if k % 256 == 32:
                    # For Space key

                    file = cv2.imencode('.jpg', img)[1].tobytes()
                    cam.release()
                    cv2.destroyAllWindows()
                    self.pic = file
        else:
            messagebox.showwarning("Attendance - Add Subject", "Student Name and class field is required!",master=root)



    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        global pic
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("722x588+650+150")
        top.minsize(148, 1)
        top.maxsize(1924, 1055)
        top.resizable(1, 1)
        top.title("Attendance - Add Student")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.0, rely=0.0, relheight=1.015, relwidth=1.004)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#00ffff")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.Label1 = tk.Label(self.Frame1)
        self.Label1.place(relx=0.11, rely=0.251, height=45, width=167)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#00ffff")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Yu Gothic UI Semibold} -size 13 -weight bold -slant roman -underline 0 -overstrike 0")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Student Name''')

        self.txtName = tk.Entry(self.Frame1)
        self.txtName.place(relx=0.359, rely=0.251,height=44, relwidth=0.53)
        self.txtName.configure(background="white")
        self.txtName.configure(borderwidth="2")
        self.txtName.configure(disabledforeground="#a3a3a3")
        self.txtName.configure(font="-family {Yu Gothic UI Semibold} -size 11 -weight bold -slant roman -underline 0 -overstrike 0")
        self.txtName.configure(foreground="#000000")
        self.txtName.configure(highlightbackground="#d9d9d9")
        self.txtName.configure(highlightcolor="black")
        self.txtName.configure(insertbackground="black")
        self.txtName.configure(selectbackground="blue")
        self.txtName.configure(selectforeground="white")

        self.Label1_1 = tk.Label(self.Frame1)
        self.Label1_1.place(relx=0.081, rely=0.374, height=45, width=196)
        self.Label1_1.configure(activebackground="#f9f9f9")
        self.Label1_1.configure(activeforeground="black")
        self.Label1_1.configure(background="#00ffff")
        self.Label1_1.configure(disabledforeground="#a3a3a3")
        self.Label1_1.configure(font="-family {Yu Gothic UI Semibold} -size 13 -weight bold -slant roman -underline 0 -overstrike 0")
        self.Label1_1.configure(foreground="#000000")
        self.Label1_1.configure(highlightbackground="#d9d9d9")
        self.Label1_1.configure(highlightcolor="black")
        self.Label1_1.configure(text='''Student Class''')

        self.comboClass = ttk.Combobox(self.Frame1)
        self.comboClass.place(relx=0.361, rely=0.374, relheight=0.077
                , relwidth=0.52)
        self.value_list = ['Select Class']
        model.readAllClass(self.value_list)
        self.comboClass.configure(values=self.value_list)
        self.comboClass.configure(font="-family {Yu Gothic UI Semibold} -size 12 -weight bold -slant roman -underline 0 -overstrike 0")
        self.comboClass.configure(state='readonly')
        self.comboClass.configure(textvariable=add_student_support.combobox)
        self.comboClass.configure(takefocus="")
        self.comboClass.current(0)

        self.btnTakePic = tk.Button(self.Frame1)
        self.btnTakePic.place(relx=0.361, rely=0.519, height=53, width=166)
        self.btnTakePic.configure(activebackground="#ececec")
        self.btnTakePic.configure(activeforeground="#000000")
        self.btnTakePic.configure(background="#eac515")
        self.btnTakePic.configure(borderwidth="3")
        self.btnTakePic.configure(disabledforeground="#a3a3a3")
        self.btnTakePic.configure(font="-family {Segoe UI Emoji} -size 13 -weight bold -slant roman -underline 0 -overstrike 0")
        self.btnTakePic.configure(foreground="#000000")
        self.btnTakePic.configure(highlightbackground="#d9d9d9")
        self.btnTakePic.configure(highlightcolor="black")
        self.btnTakePic.configure(pady="0")
        self.btnTakePic.configure(text='''Take Picture''')
        self.btnTakePic.configure(command=self.takePic)

        self.Label1_4 = tk.Label(self.Frame1)
        self.Label1_4.place(relx=0.108, rely=0.519, height=45, width=167)
        self.Label1_4.configure(activebackground="#f9f9f9")
        self.Label1_4.configure(activeforeground="black")
        self.Label1_4.configure(background="#00ffff")
        self.Label1_4.configure(disabledforeground="#a3a3a3")
        self.Label1_4.configure(font="-family {Yu Gothic UI Semibold} -size 13 -weight bold -slant roman -underline 0 -overstrike 0")
        self.Label1_4.configure(foreground="#000000")
        self.Label1_4.configure(highlightbackground="#d9d9d9")
        self.Label1_4.configure(highlightcolor="black")
        self.Label1_4.configure(text='''Student Picture''')

        self.btnAdd = tk.Button(self.Frame1)
        self.btnAdd.place(relx=0.361, rely=0.698, height=53, width=386)
        self.btnAdd.configure(activebackground="#ececec")
        self.btnAdd.configure(activeforeground="#000000")
        self.btnAdd.configure(background="#eac515")
        self.btnAdd.configure(borderwidth="3")
        self.btnAdd.configure(disabledforeground="#a3a3a3")
        self.btnAdd.configure(font="-family {Segoe UI Emoji} -size 13 -weight bold -slant roman -underline 0 -overstrike 0")
        self.btnAdd.configure(foreground="#000000")
        self.btnAdd.configure(highlightbackground="#d9d9d9")
        self.btnAdd.configure(highlightcolor="black")
        self.btnAdd.configure(pady="0")
        self.btnAdd.configure(text='''Add''')
        self.btnAdd.configure(command=self.addStudent)

        self.btnBrowsePic = tk.Button(self.Frame1)
        self.btnBrowsePic.place(relx=0.63, rely=0.519, height=53, width=186)
        self.btnBrowsePic.configure(activebackground="#ececec")
        self.btnBrowsePic.configure(activeforeground="#000000")
        self.btnBrowsePic.configure(background="#eac515")
        self.btnBrowsePic.configure(borderwidth="3")
        self.btnBrowsePic.configure(disabledforeground="#a3a3a3")
        self.btnBrowsePic.configure(font="-family {Segoe UI Emoji} -size 13 -weight bold -slant roman -underline 0 -overstrike 0")
        self.btnBrowsePic.configure(foreground="#000000")
        self.btnBrowsePic.configure(highlightbackground="#d9d9d9")
        self.btnBrowsePic.configure(highlightcolor="black")
        self.btnBrowsePic.configure(pady="0")
        self.btnBrowsePic.configure(text='''Browse Picture''')
        self.btnBrowsePic.configure(command=self.load_file)

        self.lblPicPath = tk.Label(self.Frame1)
        self.lblPicPath.place(relx=0.377, rely=0.618, height=35, width=363)
        self.lblPicPath.configure(activebackground="#f9f9f9")
        self.lblPicPath.configure(activeforeground="black")
        self.lblPicPath.configure(background="#00ffff")
        self.lblPicPath.configure(disabledforeground="#a3a3a3")
        self.lblPicPath.configure(font="-family {Yu Gothic UI Semibold} -size 12 -weight bold -slant roman -underline 0 -overstrike 0")
        self.lblPicPath.configure(foreground="#000000")
        self.lblPicPath.configure(highlightbackground="#d9d9d9")
        self.lblPicPath.configure(highlightcolor="black")
        self.pic = ""

        self.Label1_1 = tk.Label(self.Frame1)
        self.Label1_1.place(relx=0.11, rely=0.134, height=45, width=167)
        self.Label1_1.configure(activebackground="#f9f9f9")
        self.Label1_1.configure(activeforeground="black")
        self.Label1_1.configure(background="#00ffff")
        self.Label1_1.configure(disabledforeground="#a3a3a3")
        self.Label1_1.configure(font="-family {Yu Gothic UI Semibold} -size 13 -weight bold -slant roman -underline 0 -overstrike 0")
        self.Label1_1.configure(foreground="#000000")
        self.Label1_1.configure(highlightbackground="#d9d9d9")
        self.Label1_1.configure(highlightcolor="black")
        self.Label1_1.configure(text='''Roll No''')

        self.txtRoll = tk.Entry(self.Frame1)
        self.txtRoll.place(relx=0.359, rely=0.134,height=44, relwidth=0.53)
        self.txtRoll.configure(background="white")
        self.txtRoll.configure(borderwidth="2")
        self.txtRoll.configure(disabledforeground="#a3a3a3")
        self.txtRoll.configure(font="-family {Yu Gothic UI Semibold} -size 11 -weight bold -slant roman -underline 0 -overstrike 0")
        self.txtRoll.configure(foreground="#000000")
        self.txtRoll.configure(highlightbackground="#d9d9d9")
        self.txtRoll.configure(highlightcolor="black")
        self.txtRoll.configure(insertbackground="black")
        self.txtRoll.configure(selectbackground="blue")
        self.txtRoll.configure(selectforeground="white")

if __name__ == '__main__':
    vp_start_gui()





